$colors: (
  brand: #F86110,
  grey-100: #FBFCFD,
  grey-200: #F1F5F9,
  grey-250: #DAE0E7,
  grey-300: #56728C,
  grey-400: #002A55,
  white: #fff,
);

// Function for setting color inside rules - background-color: color(brand);
@function color($color-name) {
  @return map-get($colors, $color-name);
}

$spacing: (
  xs: 4px,
  s: 8px,
  m: 12px,
  l: 20px,
  xl: 32px,
);

// Function for setting spacing inside rules - margin-bottom: spacing(xl);
@function spacing($spacing-size) {
  @return map-get($spacing, $spacing-size);
}

// Utility classes - class="stack-xl"
@each $name, $value in $spacing {
  .stack-#{$name} {
    margin-bottom: $value !important;
  }
  .inline-#{$name} {
    margin-right: $value !important;
  }
  .insets-#{$name} {
    padding: $value !important;
  }
}

$font-family: "Proxima Nova","Helvetica Neue", Helvetica, Arial, sans-serif;

$type-weights: (
  regular: 400,
  bold: 700
);
// Gets a type weight e.g. type-weight(bold);
@function type-weight($weight) {
  @return map-get($type-weights, $weight)
};

$type-colors: (
  default: color(grey-400),
  subdued: color(grey-300),
  link: color(brand)
);
// Gets the type color e.g. type-color(link);
@function type-color($color) {
  @return map-get($type-colors, $color)
};

$type-styles: (
  body: (
    font-size: 16px,
    line-height: 24px,
    font-weight: type-weight(regular),
    color: type-color(subdued)
  ),
  link: (
    color: color(brand)
  ),
  h1: (
    font-size: 32px,
    line-height: 36px,
    font-weight: type-weight(bold),
    color: type-color(default)
  ),
  h2: (
    font-size: 24px,
    line-height: 28px,
    font-weight: type-weight(bold),
    color: type-color(default)
  ),
  h3: (
    font-size: 18px,
    line-height: 24px,
    font-weight: type-weight(bold),
    color: type-color(default)
  ),
  h4: (
    font-size: 16px,
    line-height: 20px,
    font-weight: type-weight(bold),
    color: type-color(default)
  ),
  tagline: (
    font-size: 20px,
    line-height: 24px,
    font-weight: type-weight(regular),
    color: type-color(subdued)
  ),
  small: (
    font-size: 14px,
    line-height: 18px,
  ),
  subdued: (
    color: type-color(subdued)
  ),
  strong: (
    font-weight: type-weight(bold)
  ),
  tab: (
    font-size: 12px,
    line-height: 14px,
    font-weight: type-weight(bold),
    text-transform: uppercase
  )
);

// e.g. color: property(body-subdued, color)
@function type-property($type-style, $property) {
  @return map-deep-get($type-styles, $type-style, $property);
}

@mixin type( $type-style: body, $type-color: null, $type-weight: null ) {
  @if $type-style {
    $type-style: map-get($type-styles, $type-style);
    @if map-has-key($type-style, font-size) {
      font-size: map-get($type-style, font-size);
    }
    @if map-has-key($type-style, font-weight) and not $type-weight {
      font-weight: map-get($type-style, font-weight);
    }
    @if map-has-key($type-style, line-height) {
      line-height: map-get($type-style, line-height);
    }
    @if map-has-key($type-style, color) and not $type-color {
      color: map-get($type-style, color);
    }
    @if map-has-key($type-style, text-transform) {
      text-transform: map-get($type-style, text-transform);
    }
  }
  @if $type-color {
    @if map-has-key($type-colors, $type-color) {
      color: map-get($type-colors, $type-color);
    }
  }
  @if $type-weight {
    @if map-has-key($type-weights, $type-weight) {
      weight: map-get($type-weights, $type-weight);
    }
  }
}

// Utility classes - class="type-body"
@each $name, $value in $type-styles {
  .type-#{$name} {
    @include type($name)
  }
}

$border-dark: 1px solid color(grey-250);
$border-light: 1px solid color(grey-200);
$border-radius: 6px;

$global-margin-x: spacing(xl);

$global-header-border-width: 3px;
$global-header-border-color: color(brand);
$global-header-height: 56px;
$global-header-background-color: color(white);
$global-header-padding-x: $global-margin-x;

$code-snippet-background-color: color(grey-100);
$code-snippet-padding: spacing(l);

$image-box-shadow: 0 0 15px 0 rgba(38,50,56,0.20);

* {
  box-sizing: border-box;
}

body {
  @include type(body);
  height: 100%;
  font-family: $font-family;
  margin: 0;
}

img {
  width: 100%;
}

h1, h2, h3, h4, h5, h6, p {
  margin: 0;
  padding: 0;
}
h1 {
  @include type(h1);
  margin-bottom: spacing(l);
}
h2 {
  @include type(h2);
  margin-bottom: spacing(m);
}
h3 {
  @include type(h3);
  margin-bottom: spacing(s);
}
h4 {
  @include type(h4);
  margin-bottom: spacing(xs);
}
p {
  margin-bottom: spacing(l);
}
strong {
  @include type(strong);
}
a {
  @include type(link)
}
ul {
  list-style: none;
  padding: 0;
}
.tablet-portrait-hide {
  @media only screen and (max-width: 768px) {
    display: none!important;
  }
}
.post-section {
  margin-bottom: spacing(xl) * 2;
  &:last-child {
    margin-bottom: 0;
  }
}
