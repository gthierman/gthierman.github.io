// Function for getting nested values in maps
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

$colors: (
  accent-100:   #F3FBFD,
  accent-500:   #0EA5C7,
  accent-600:   #007CA5,
  accent-700:   #003E53,
  focus:        #9ED8FF,
  grey-50:      #FAFDFE,
  grey-100:     #F4F7F9,
  grey-200:     #EBF3F6,
  grey-300:     #CCD9E0,
  grey-400:     #90A6BC,
  grey-500:     #576C82,
  grey-600:     #2C3D4E,
  grey-700:     #001C37,
  white:        #fff,
);
// Function for setting color inside rules - background-color: color(brand);
@function color($color-name) {
  @return map-get($colors, $color-name);
}

$link-color: color(accent-600);
$link-hover-background-color: color(accent-100);
$link-hover-color: color(accent-700);

$spacing: (
  xs:   4px,
  s:    8px,
  m:    12px,
  l:    20px,
  xl:   32px,
  xxl:  40px,
  xxxl: 60px
);

// Function for setting spacing inside rules - margin-bottom: spacing(xl);
@function spacing($spacing-size) {
  @return map-get($spacing, $spacing-size);
}

// Utility classes - class="stack-xl"
@each $name, $value in $spacing {
  .spacing-stack-#{$name} {
    margin-bottom: $value !important;
  }
  .spacing-inline-#{$name} {
    margin-right: $value !important;
  }
  .spacing-insets-#{$name} {
    padding: $value !important;
  }
}


$font-family: -apple-system, BlinkMacSystemFont,"Helvetica Neue", Helvetica, Arial, Roboto, sans-serif;
$font-weights: (
  regular: 400,
  bold: 700
);
@function get-font-weight($weight) {
  @if map-has-key($font-weights, $weight) {
    @return map-get($font-weights, $weight);
  }
  @error "Invalid type-weight: `#{$weight}`.";
};
$font-colors: (
  dark: color(grey-700),
  subdued: color(grey-500) 
);
@function get-font-color($color) {
  @if map-has-key($font-colors, $color) {
    @return map-get($font-colors, $color);
  }
  @error "Invalid font-color: `#{$color}`.";
};
$font-styles: (
  body: (
    font-size:   16px,
    line-height: 24px,
    color: get-font-color(subdued)
  ),
  h1: (
    font-size:   30px,
    line-height: 38px,
    font-weight: get-font-weight(bold),
    color: get-font-color(dark)
  ),
  h2: (
    font-size:   24px,
    line-height: 32px,
    font-weight: get-font-weight(bold),
    color: get-font-color(dark)
  ),
  h3: (
    font-size:   18px,
    line-height: 24px,
    font-weight: get-font-weight(bold),
    color: get-font-color(dark)
  ),
  h4: (
    font-size:   16px,
    line-height: 24px,
    font-weight: get-font-weight(bold),
    color: get-font-color(dark),
  ),
  subheading: (
    font-weight: get-font-weight(regular),
    color: get-font-color(subdued)
  ),
  small: (
    font-size: 14px,
    line-height: 20px
  )
);
@mixin font-weight($weight) {
  font-weight: map-get($font-weights, $weight);
}
@mixin font-color($color) {
  color: get-font-color(#{$color});
}
@mixin font-style($style) {
  @each $value, $property in map-get($font-styles, $style) {
    @debug $property;
    #{$value}: #{$property};
  }
}

$breakpoints: (
  iphone:         340px,
  ipad-portrait:  768px,
  ipad-landscape: 1024px,
  laptop:         1440px,
  desktop-s:      1600px,
  desktop-m:      1800px,
  desktop-l:      2000px,
);
@each $breakpoint, $value in $breakpoints {
  @media screen and (max-width: $value) {
    .d-#{$breakpoint}-none {
      display: none!important;
    }
    .d-#{$breakpoint}-flex {
      display: flex!important;
    }
    .d-#{$breakpoint}-block {
      display: block!important;
    }
    .d-#{$breakpoint}-inline-block {
      display: inline-block!important;
    }
  }
}
@mixin breakpoint-horiz($breakpoint) {
  $breakpoint: map-get($breakpoints, $breakpoint);
  @if $breakpoint {
    @media screen and (max-width: $breakpoint) {
      @content;
    }
  }
}
